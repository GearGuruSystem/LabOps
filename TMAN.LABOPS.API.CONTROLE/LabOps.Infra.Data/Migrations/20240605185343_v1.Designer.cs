// <auto-generated />
using System;
using LabOps.Infra.Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabOps.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240605185343_v1")]
    partial class V1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LabOps.Domain.Entities.CaracteristicaTipo", b =>
                {
                    b.Property<int>("IDCaracteristicaTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCaracteristicaTipo"));

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioAtualizacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDCaracteristicaTipo");

                    b.ToTable("CaracteristicaTipos");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.CaracteristicaTipoTipoEquipamento", b =>
                {
                    b.Property<int>("CaracteristicaTipo_ID")
                        .HasColumnType("int");

                    b.Property<int>("TipoEquipamento_ID")
                        .HasColumnType("int");

                    b.HasKey("CaracteristicaTipo_ID", "TipoEquipamento_ID");

                    b.HasIndex("TipoEquipamento_ID");

                    b.ToTable("CaracteristicasTipoTipoEquipamento");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.CaracteristicaValor", b =>
                {
                    b.Property<int>("IDCaracteristicaValor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCaracteristicaValor"));

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAtualizacao")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDCaracteristicaValor");

                    b.ToTable("CaracteristicasValor");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.Equipamento", b =>
                {
                    b.Property<int>("IDEquipamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDEquipamento"));

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FabricanteIDFabricante")
                        .HasColumnType("int");

                    b.Property<int>("IDFabricante")
                        .HasColumnType("int");

                    b.Property<int?>("IDLaboratorio")
                        .HasColumnType("int");

                    b.Property<int>("IDSituacao")
                        .HasColumnType("int");

                    b.Property<int>("IDTipoEquipamento")
                        .HasColumnType("int");

                    b.Property<int?>("LaboratorioIDLaboratorio")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("SituacaoIDSituacao")
                        .HasColumnType("int");

                    b.Property<int?>("TipoEquipamentoIDTipoEquipamento")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioInsercao")
                        .HasColumnType("int");

                    b.HasKey("IDEquipamento");

                    b.HasIndex("FabricanteIDFabricante");

                    b.HasIndex("IDFabricante");

                    b.HasIndex("IDLaboratorio");

                    b.HasIndex("IDSituacao");

                    b.HasIndex("IDTipoEquipamento");

                    b.HasIndex("LaboratorioIDLaboratorio");

                    b.HasIndex("SituacaoIDSituacao");

                    b.HasIndex("TipoEquipamentoIDTipoEquipamento");

                    b.ToTable("Equipamentos");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.EquipamentoCaracteristica", b =>
                {
                    b.Property<int>("IDEquipamentoCaracteristica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDEquipamentoCaracteristica"));

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CaracteristicaTipoIDCaracteristicaTipo")
                        .HasColumnType("int");

                    b.Property<int?>("CaracteristicaValorIDCaracteristicaValor")
                        .HasColumnType("int");

                    b.Property<int>("EquipamentoIDEquipamento")
                        .HasColumnType("int");

                    b.Property<int>("IDCaracteristicaTipo")
                        .HasColumnType("int");

                    b.Property<int?>("IDCaracteristicaValor")
                        .HasColumnType("int");

                    b.Property<int>("IDEquipamento")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioAtualizacao")
                        .HasColumnType("int");

                    b.Property<string>("ValorIndividual")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDEquipamentoCaracteristica");

                    b.HasIndex("CaracteristicaTipoIDCaracteristicaTipo");

                    b.HasIndex("CaracteristicaValorIDCaracteristicaValor");

                    b.HasIndex("EquipamentoIDEquipamento");

                    b.HasIndex("IDCaracteristicaTipo");

                    b.HasIndex("IDCaracteristicaValor");

                    b.ToTable("EquipamentosCaracteristicas");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.Fabricante", b =>
                {
                    b.Property<int>("IDFabricante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDFabricante"));

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioAtualizacao")
                        .HasColumnType("int");

                    b.HasKey("IDFabricante");

                    b.ToTable("Fabricantes");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.Laboratorio", b =>
                {
                    b.Property<int>("IDLaboratorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDLaboratorio"));

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChaveResponsavel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDUsuarioResponsavel")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioAtualizacao")
                        .HasColumnType("int");

                    b.HasKey("IDLaboratorio");

                    b.ToTable("Laboratorios");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.Situacao", b =>
                {
                    b.Property<int>("IDSituacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDSituacao"));

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioAtualizacao")
                        .HasColumnType("int");

                    b.HasKey("IDSituacao");

                    b.ToTable("Situacoes");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.TipoEquipamento", b =>
                {
                    b.Property<int>("IDTipoEquipamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTipoEquipamento"));

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioAtualizacao")
                        .HasColumnType("int");

                    b.HasKey("IDTipoEquipamento");

                    b.ToTable("TiposEquipamento");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.CaracteristicaTipoTipoEquipamento", b =>
                {
                    b.HasOne("LabOps.Domain.Entities.CaracteristicaTipo", "CaracteristicaTipo")
                        .WithMany("CaracteristicaTipoTipoEquipamentos")
                        .HasForeignKey("CaracteristicaTipo_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabOps.Domain.Entities.TipoEquipamento", "TipoEquipamento")
                        .WithMany("CaracteristicaTipoTipoEquipamentos")
                        .HasForeignKey("TipoEquipamento_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaracteristicaTipo");

                    b.Navigation("TipoEquipamento");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.Equipamento", b =>
                {
                    b.HasOne("LabOps.Domain.Entities.Fabricante", null)
                        .WithMany("Equipamentos")
                        .HasForeignKey("FabricanteIDFabricante");

                    b.HasOne("LabOps.Domain.Entities.Fabricante", "Fabricante")
                        .WithMany()
                        .HasForeignKey("IDFabricante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabOps.Domain.Entities.Laboratorio", "Laboratorio")
                        .WithMany()
                        .HasForeignKey("IDLaboratorio");

                    b.HasOne("LabOps.Domain.Entities.Situacao", "Situacao")
                        .WithMany()
                        .HasForeignKey("IDSituacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabOps.Domain.Entities.TipoEquipamento", "TipoEquipamento")
                        .WithMany()
                        .HasForeignKey("IDTipoEquipamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabOps.Domain.Entities.Laboratorio", null)
                        .WithMany("Equipamentos")
                        .HasForeignKey("LaboratorioIDLaboratorio");

                    b.HasOne("LabOps.Domain.Entities.Situacao", null)
                        .WithMany("Equipamentos")
                        .HasForeignKey("SituacaoIDSituacao");

                    b.HasOne("LabOps.Domain.Entities.TipoEquipamento", null)
                        .WithMany("Equipamentos")
                        .HasForeignKey("TipoEquipamentoIDTipoEquipamento");

                    b.Navigation("Fabricante");

                    b.Navigation("Laboratorio");

                    b.Navigation("Situacao");

                    b.Navigation("TipoEquipamento");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.EquipamentoCaracteristica", b =>
                {
                    b.HasOne("LabOps.Domain.Entities.CaracteristicaTipo", null)
                        .WithMany("EquipamentoCaracteristicas")
                        .HasForeignKey("CaracteristicaTipoIDCaracteristicaTipo");

                    b.HasOne("LabOps.Domain.Entities.CaracteristicaValor", null)
                        .WithMany("EquipamentoCaracteristicas")
                        .HasForeignKey("CaracteristicaValorIDCaracteristicaValor");

                    b.HasOne("LabOps.Domain.Entities.Equipamento", "Equipamento")
                        .WithMany("EquipamentoCaracteristicas")
                        .HasForeignKey("EquipamentoIDEquipamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabOps.Domain.Entities.CaracteristicaTipo", "CaracteristicaTipo")
                        .WithMany()
                        .HasForeignKey("IDCaracteristicaTipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabOps.Domain.Entities.CaracteristicaValor", "CaracteristicaValor")
                        .WithMany()
                        .HasForeignKey("IDCaracteristicaValor");

                    b.Navigation("CaracteristicaTipo");

                    b.Navigation("CaracteristicaValor");

                    b.Navigation("Equipamento");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.CaracteristicaTipo", b =>
                {
                    b.Navigation("CaracteristicaTipoTipoEquipamentos");

                    b.Navigation("EquipamentoCaracteristicas");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.CaracteristicaValor", b =>
                {
                    b.Navigation("EquipamentoCaracteristicas");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.Equipamento", b =>
                {
                    b.Navigation("EquipamentoCaracteristicas");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.Fabricante", b =>
                {
                    b.Navigation("Equipamentos");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.Laboratorio", b =>
                {
                    b.Navigation("Equipamentos");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.Situacao", b =>
                {
                    b.Navigation("Equipamentos");
                });

            modelBuilder.Entity("LabOps.Domain.Entities.TipoEquipamento", b =>
                {
                    b.Navigation("CaracteristicaTipoTipoEquipamentos");

                    b.Navigation("Equipamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
